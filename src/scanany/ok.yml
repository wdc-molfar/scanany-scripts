# Скрипт telegram.yml призначений для вибірки текстів повідомлень з ресурсу https://ok.ru за допомогою
# скрапера [scanany](https://github.com/boldak/scanany)

# Входить до складу проекту [@molfar](https://github.com/wdc-molfar)


# Відлагодження відбувається за допомою команди:

# ```sh
# npm run debug <path to script> [<path to settings>]
# ```

# Наприклад:

# ```sh
# npm run debug ./src/scanany/ok.yml ./test/params/ok.params.yml
# ```  

# Вхідні дані формуються планувальником завдань на основі оброблення бази даних медіа-джерел.

# Приклад вхідних даних (```./test/params/ok.params.yml```):
# ```yaml
#options:
#  task:
#    params: ## from section source
#      url: https://ok.ru/gorodgomel
#    instance: b940bfda-d145-4385-9dc6-c347dcd0fbcf ## scheduler instance   
#  scraper:
#    instance: b940bfda-d145-4385-9dc6-c347dcd0fbcf ## scraper instance   
#    scrapedAt: 2022-08-18T12:04:51.474Z     
# ```

# ** Опис алгоритму

# Використовуються плагіни ```axios-plugin``` для HTTP-запитів, ```cheerio-plugin```, ```js-plugin```
- use:     
    - axios-plugin
    - cheerio-plugin
    - js-plugin

# Попереднє оброблення вхідних даних
- map:
    # Формування url зі списком публікацій на основі вихідних даних (змінна ```url```)
    - $ref: options.task.params.url
      transform:
        js: (command, context, value) => `https://infostream.fun/cgi-bin/001.pl?link=${value}`
      into: url

# вибір даних із джерела
# вибірка та оброблення сторінки зі стрічкою публікацій з використанням ```axios-plugin``` за адресою ```url``` 
- fetch:
    request:
      method: GET
      url: 
        $ref: url
    transform:
      apply:
        - project: data
        - html->$
    into: page

# вибірка із "page" всіх повідомлень (CSS-селектор ```div[class="feed-list __compact"]```)
- all:
    $ref: page
    select: div[class="feed-w"]
    into: res

# оброблення елементів колекції ```res```   
- each:
    in:
      $ref: res
    as: item
    indexed-by: index
    into: messages
    
    # оброблення поточного елемента ```item```
    apply:
    
      - map:
          # поміщення ```options``` в ```res```
          - $ref: options
            into: res

          # перетворення item -> html -> объект cheerio
          # результат перетворення буде поміщений у ```msg```
          - $ref: item
            transform: 
              apply:
                - html
                - html->$
            into: msg
      
      # вибірка із "msg" тексту повідомлення (CSS-селектор ```iv[class="media-text_cnt"]```)
      - once:
          $ref: msg
          select: div[class="media-text_cnt"]
          apply:
            # перетворення вибраного елемента в text та поміщення його в змінну ```res.scraper.message.text```  
            - transform: 
                apply:
                  - text
                  - js: '(command, context, value) => value.replace(/[\u2000-\uffff]+/g, " ")'
                  - js: (command, context, value) => value.replace(/(\n)/g, " ")
              into: res.scraper.message.text
            
            # перетворення вибраного елемента в html та поміщення його в змінну ```res.scraper.message.raw.html```
            - transform: 
                apply:
                  - html
                  - js: >
                          (command, context, value) => { 
                            if (value) {
                              return value
                            }
                          }
              into: res.scraper.message.raw.html
      
      # перетворення ```res.scraper.message.text``` в сигнатуру md5 та поміщення результату в ```res.scraper.message.md5```
      - map:
          $ref: res.scraper.message.text
          transform: md5
          into: res.scraper.message.md5 
      
      # обчислення поточної дати в форматі iso та поміщення її у ```res.scraper.scrapedAt```
      - transform: date
        into: res.scraper.message.publishedAt

      # обчислення поточної дати в форматі iso та поміщення її у ```res.scraper.scrapedAt```
      - transform: date
        into: res.scraper.scrapedAt

      # повернення результату оброблення поточного елемента ```item``` колекції ```res``` в ```res```
      - return: res

- return: messages
# Скрипт ok.yml призначений для вибірки текстів повідомлень з ресурсу https://ok.ru за допомогою
# скрапера [scanany](https://github.com/boldak/scanany)

# Входить до складу проекту [@molfar](https://github.com/wdc-molfar)


# Відлагодження відбувається за допомою команди:

# ```sh
# npm run debug <path to script> [<path to settings>]
# ```

# Наприклад:

# ```sh
# npm run debug ./src/scanany/ok.yml ./test/params/ok.params.yml
# ```  

# Вхідні дані формуються планувальником завдань на основі оброблення бази даних медіа-джерел.

# Приклад вхідних даних (```./test/params/ok.params.yml```):
# ```yaml
#options:
#  task:
#    params: ## from section source
#      url: https://ok.ru/gorodgomel
#    instance: b940bfda-d145-4385-9dc6-c347dcd0fbcf ## scheduler instance   
#  scraper:
#    instance: b940bfda-d145-4385-9dc6-c347dcd0fbcf ## scraper instance   
#    scrapedAt: 2022-08-18T12:04:51.474Z     
# ```

# ** Опис алгоритму

# Використовуються плагіни ```axios-plugin``` для HTTP-запитів, ```cheerio-plugin```, ```js-plugin```
- use:     
    - axios-plugin
    - cheerio-plugin
    - js-plugin

# Попереднє оброблення вхідних даних
- map:
    # Формування url зі списком публікацій на основі вихідних даних (змінна ```url```)
    - $ref: options.task.params.url
      into: url

# вибір даних із джерела
# вибірка та оброблення сторінки зі стрічкою публікацій з використанням ```axios-plugin``` за адресою ```url``` 
- fetch:
    request:
      method: GET
      url: 
        $ref: url
    transform:
      apply:
        - project: data
        - html->$
    into: page

# вибірка із "page" всіх повідомлень, що містять текст (CSS-селектор ```a[class="media_more_a"]```)
- all:
    $ref: page
    select: a[class="media_more_a"]
    into: list

# оброблення елементів колекції ```list```   
- each:
    in:
      $ref: list
    as: item
    indexed-by: index
    into: messages
    
    # оброблення поточного елемента ```item```
    apply:
    
      - map:
          $ref: item
          # перетворення вибраного елемента в href, формування повної адреси 
          # та поміщення її в змінну ```href```
          transform: 
            apply:
              - attributes: href
              - project: href
              - js: (command, context, value) => `https://ok.ru${value}`
          into: href
      
      # оброблення сторінки окремого повідомлення з використанням ```axios-plugin``` адресою ```href``` 
      # та поміщення результату в змінну ```page```
      - fetch:
            request:
              method: GET
              url: 
                $ref: href
            transform:
              apply:
                - project: data
                - html->$
            into: page  
        
      - map:
          # поміщення ```options``` в ```res```
          - $ref: options
            into: res

      # вибірка із "page" тексту повідомлення (селектор ```div[class="media-text_cnt_tx emoji-tx textWrap"]```)      
      - once:
          $ref: page
          select: div[class="media-text_cnt_tx emoji-tx textWrap"]
          apply:
          # перетворення вибраного елемента в text та поміщення його в змінну ```res.scraper.message.text```
          - transform:
              apply:
                - text
                - js: '(command, context, value) => value.replace(/[\u2000-\uffff]+/g, " ")'
                - js: (command, context, value) => `${value.replace(/(\n)/g, " ")} `
            into: res.scraper.message.text
          
          # перетворення вибраного елемента в html та поміщення його в змінну ```res.scraper.raw.html```  
          - transform: html
            into: res.scraper.message.raw.html
      
      - map:
          # перетворення ```res.scraper.message.text``` в сигнатуру md5 та 
          # поміщення результату в ```res.scraper.message.md5```
          - $ref: res.scraper.message.text
            transform: md5
            into: res.scraper.message.md5
            
          # формування дати публікації як дати сканування в форматі iso та
          # поміщення її у ```res.scraper.scrapedAt```
          - transform: date
            into: res.scraper.message.publishedAt
            
      # вибірка із "page" всіх посилань на зображення (селектор ```img[class="media-photos_img"]```)      
      # поміщення результату в ```images```
      - all:
          $ref: page
          select: img[class="media-photos_img"]
          into: images
          
      # вибірка зі списку ```images``` всіх посилань та їх обробка 
      # поміщення списку сформованих посилань у змінну ```res.scraper.message.links```
      - map:
          - $ref: images
            transform:
              - js: (command, context, value) => value.map( a => a.attr("src"))
              - js: >
                        (command, context, value) => { 
                          if (value) {
                            var i = 0
                            var links = []
                              value.forEach(function(entry) {
                                  links[i] = "https:"+entry
                                  i = i + 1
                                })
                            }
                            if (links[0]) {
                              return links
                            }
                          }
            into: res.scraper.message.images 
            
          # перетворення ```res.scraper.message.raw.html``` в список посиланнь та
          # поміщення результату в ```res.scraper.message.links```
          - $ref: res.scraper.message.text
            transform:
              - js: >
                        (command, context, value) => { 
                          value = value.match(/\http(.+?)\ /g)
                          if (value) {
                            var i = 0
                            var links = []
                              value.forEach(function(entry) {
                                links[i] = entry.replace(" ", "")
                                i = i + 1
                                })
                            }
                            return links
                          } 
            into: res.scraper.message.links

          # обчислення поточної дати в форматі iso та поміщення її у ```res.scraper.scrapedAt```
          - transform: date 
            into: res.scraper.scrapedAt
        
      # повернення результату оброблення поточного елемента ```item``` колекції ```res``` в ```res```
      - return: res

- return: messages

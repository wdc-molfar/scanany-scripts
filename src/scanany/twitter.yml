# Скрипт twitter.yml призначений для вибірки текстів повідомлень з ресурсу https://twitter.com за допомогою
# скрапера [scanany](https://github.com/boldak/scanany)

# Входить до складу проекту [@molfar](https://github.com/wdc-molfar)


# Відлагодження відбувається за допомою команди:

# ```sh
# npm run debug <path to script> [<path to settings>]
# ```

# Наприклад:

# ```sh
# npm run debug ./src/scanany/twitter.yml ./test/params/twitter.params.yml
# ```  

# Вхідні дані формуються планувальником завдань на основі оброблення бази даних медіа-джерел.

# Приклад вхідних даних (```./test/params/twitter.params.yml```):

# ```yaml
# service: 
#   scheduler:
#     task:
#       params:
#         type: twitter
#         profile: JeffDean
#       state: planned   
# ```


# ** Опис алгоритму


# Використовуються плагіни ```puppeteer-plugin```, ```js-plugin```
 

- use: 
    - puppeteer-plugin
    - js-plugin

# Попереднє оброблення вхідних даних

- map:

    # Формування url зі списком публікацій на основі вихідних даних (змінна ```url```)
    - $ref: service.scheduler.task.params.user
      transform:
        apply:
          - js: (command, context, value) => `https://twitter.com/${value}`
      into: url
    
    # Обчислення поточної дати в форматі ```YYYY-MM-DD HH:mm:ss``` й поміщення її у ```service.scheduler.task.processedAt```
    - transform:
        apply:
          - date
          - moment.format: YYYY-MM-DD HH:mm:ss    
      into: service.scheduler.task.processedAt

    # Зміна стану завдання ```service.scheduler.task.state``` з ```"planned"``` на ```"processed"``` 
    - $const: processed
      into: service.scheduler.task.state             

- log:
    - $const: "URL:"
    - $ref: url  

# Вибірка та оброблення сторінки зі списком статтей з використанням ```puppeteer-plugin``` за адресою ```url```
- puppeteer:
    apply:
      # зупуск headless browser
      - launch:
          options:
            defaultViewport: null
            # headless: false
            args:
              # - "--no-sandbox" 
              # - "--disable-setuid-sandbox"
              - "--window-size=800,1800"
          as: browser

      # створюємо нову сторінку headless browser
      - new-page:
          $ref: browser
          as: p1
      
      # переходимо у ```p1``` на вказаний ```url```
      - goto:
          $ref: p1 
          url: 
            $ref: url
          options:
            waitUntil: networkidle2

      # вибірка із "p1" об'єктів з тегом ```"#react-root"```
      - once:
          $ref: p1
          select: "#react-root" 
          # повернення всіх обʼєктів з тегом ```"#react-root"``` у ```section```
          into: section

      # вибірка в ```section``` всіх блоків, що відповідають текстам повідомлень (селектор ```article```) в змінну ```twitElements``` - колекцію
      - all: 
          $ref: section
          select: article 
          into: twitElements

      # Оброблення елементів колекції 
      - each:
          # колекція ```twitElements```
          in:
            $ref: twitElements
          # поточний елемент ```element```
          as: element 
          indexed-by: index
          # результат оброблення буде поміщений у ```tweets```
          into: tweets

          # алгоритм оброблення поточного елемента ```element```
          apply:
            # вибірка із "element" тексту повідомлення (селектор ```div[lang]```)
            - once:
                $ref: element
                select: div[lang]
                apply:
                  # перетворення text в змінну ```res.text```
                  - transform: text
                    into: res.text
                  # перетворення html в змінну ```res.html```
                  - transform: html
                    into: res.html
            
            # вибірка із "element" першого вузла, що відповідає часу публікації (селектор ```time```)
            - once:
                $ref: element
                select: time
                apply:
                  # перетворення часу публікації у формат "YYYY-MM-DD HH:mm:ss"         
                  - transform:
                      apply:
                        - attributes: datetime
                        - project: datetime
                        - date
                        - moment.format: YYYY-MM-DD HH:mm:ss
                    # результат оброблення буде поміщений у ```res.publishedAt```
                    into: res.publishedAt   

            - map:
                # отримуємо унікальний ID на основі контенту
                - $ref: index
                  into: res.index

                # перетворення ```res.text``` в сигнатуру md5
                # результат оброблення буде поміщений у ```res.md5```
                - $ref: res.text
                  transform: md5
                  into: res.md5

                - $ref: res
                  into: msg.service.scraper.message

                # Формування остаточного результату оброблення поточного елементу колекції ```list```
                - $ref: service.scheduler      
                  into: msg.service.scheduler
        
            # Повернення результату оброблення поточного елементу колекції ```twitElements``` в ```msg```
            - return: msg    

      # закриття headless browser
      - close:
          $ref: browser

# Повернення результату роботи скрипта
- return: tweets

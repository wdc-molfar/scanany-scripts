# Скрипт picuki.yml призначений для вибірки повідомлень з ресурсу https://www.picuki.com/ за допомогою
# скрапера [scanany](https://github.com/boldak/scanany)

# Входить до складу проекту [@molfar](https://github.com/wdc-molfar)


# Відлагодження відбувається за допомою команди:

# ```sh
# npm run debug <path to script> [<path to settings>]
# ```

# Наприклад:

# ```sh
# npm run debug ./src/scanany/picuki.yml ./test/params/picuki.params.yml
# ```  

# Вхідні дані формуються планувальником завдань на основі оброблення бази даних медіа-джерел.

# Приклад вхідних даних (```./test/params/picuki.params.yml```):

# ```yaml
# service: 
#   scheduler:
#     task:
#       params:
#         type: picuki
#         profile: kyiv.operative
#       state: planned   
# ```


# ** Опис алгоритму


# Використовуються плагіни ```axios-plugin```, ```cheerio-plugin```, ```js-plugin```
 
- use: 
    - axios-plugin
    - cheerio-plugin
    - js-plugin

# Попереднє оброблення вхідних даних

- map:
    
    # Формування url зі списком публікацій на основі вихідних даних (змінна ```url```)
    - $ref: service.scheduler.task.params.profile
      transform:
        apply:
          - js: (command, context, value) => `https://www.picuki.com/profile/${value}`
      into: url
    
    # Обчислення поточної дати та перетворення її у формат ```YYYY-MM-DD HH:mm:ss```    
    - transform:
        apply:
          - date
          - moment.format: YYYY-MM-DD HH:mm:ss 
      # результат оброблення буде поміщений у ```service.scheduler.task.processedAt```   
      into: service.scheduler.task.processedAt

    # Зміна стану завдання ```service.scheduler.task.state``` з ```"planned"``` на ```"processed"``` 
    - $const: processed
      into: service.scheduler.task.state             

# вивід значення ```url```
- log:
    - $const: "URL:"
    - $ref: url  


# Вибірка та оброблення сторінки зі списком публікацій з використанням ```axios-plugin``` за адресою ```url``` 

- fetch:
    request:
      method: GET
      url: 
        $ref: url
    # перетворюємо відповідь (response) об'єкт cheerio 
    transform:
      apply:
        - project: data
        # Перетворення в об'єкт cheerio
        - html->page    
    # результат оброблення буде поміщений у ```page```
    into: page


# Селекція в ```page``` всіх вузлів, що відповідають опису публікацій (селектор ```div[data-s="media"]```)        
- all:
    $ref: page
    select: div[data-s="media"]
    # результат оброблення буде поміщений у ```list```
    into: list


# Оброблення елементів колекції         
- each:        
    # колекція
    in:
      $ref: list 
    # поточний елемент
    as: item
    indexed-by: index
    # результат оброблення буде поміщений у ```result```
    into: result

    apply:
      - map:
          - $ref: item
            # перетворення item -> html -> page
            transform: 
              apply:
                - html
                - html->page
            # результат оброблення буде поміщений у ```m```
            into: m

          - $ref: item
            transform: 
              - html
            # результат оброблення буде поміщений у ```message.html```
            into: message.html 
      
      # вибірка із "m" опису публікації (CSS-селектор ```div.photo-description```)
      - once:
          $ref: m
          select: div.photo-description
          apply:

            # перетворення вибраного елемента в text та поміщення його в змінну ```message.text```
            - transform: 
                - text
                - js: (command, context, value) => value.trim().replace(/\S*\n\S*\n/g,"\n")
              into: message.text

      # вибірка із "m" часу публікації (CSS-селектор ```div.time```)
      - once:        
          $ref: m
          select: div.time
          apply:
            # перетворення вибраного елемента в text та поміщення його в змінну ```message.humanizedRelativeDate```
            - transform: 
                - text
                - js: (command, context, value) => value.trim()
              into: message.humanizedRelativeDate
        
      - map:
          
          # отримання унікального ID на основі контенту
          - $ref: index
            into: message.index

          # перетворення ```message.text``` в сигнатуру md5
          # результат оброблення буде поміщений у ```res.md5```
          - $ref: message.text
            transform: md5
            into: message.md5

          # перетворення поточної дати у формат ```YYYY-MM-DD HH:mm:ss```
          - transform:
              apply:
                - date
                - moment.format: YYYY-MM-DD HH:mm:ss 
            # результат оброблення буде поміщений у ```message.publishedAt```   
            into: message.processedAt

          - $ref: message
            into: res.service.scraper.message

          # формування остаточного результату оброблення поточного елементу колекції ```list```
          - $ref: service.scheduler
            into: res.service.cheduler    

      # повернення результату оброблення поточного елементу колекції ```list``` в ```res```       
      - return: res   

# повернення результату роботи скрипта
- return: result

           


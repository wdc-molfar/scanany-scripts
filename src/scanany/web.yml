# Скрипт web.yml призначений для вибірки текстів публікацій з web-ресурсів за допомогою
# скрапера [scanany](https://github.com/boldak/scanany)

# Входить до складу проекту [@molfar](https://github.com/wdc-molfar)


# Відлагодження відбувається за допомою команди:

# ```sh
# npm run debug <path to script> [<path to settings>]
# ```

# Наприклад:

# ```sh
# npm run debug ./src/scanany/web.yml ./test/params/web.params.yml
# ```  

# Вхідні дані формуються планувальником завдань на основі оброблення бази даних медіа-джерел.

# Приклад вхідних даних (```./test/params/web.params.yml```):
# ```yaml
#task:
#  options:  
#    url: https://tsn.ua
#    feed: 'div[class="l-sidebar__main c-feed-log--y c-feed-log--y-start"] a'
#    title: h1
#    content: 'div[class="c-article__body"]'
#    published: time
#    images: 'picture img'
#    links: 'div.c-article__body a'   
# ```

# ** Опис алгоритму

# Використовуються плагіни ```axios-plugin``` для HTTP-запитів, ```cheerio-plugin```, ```js-plugin```
- use:     
    - axios-plugin
    - cheerio-plugin
    - js-plugin

# Формування url джерела на основі вхідних даних та поміщення його з змінну ```url```
- map:
    - $ref: task.options.url
      into: url

# вибірка даних із джерела за адресою ```url```
# оброблення сторінки зі списком публікацій з використанням ```axios-plugin``` 
- fetch:
    request:
      method: GET
      url: 
        $ref: url
    transform:
      apply:
        - project: data
        - html->$
    into: page

# вибірка із "page" всіх елементів публікацій (CSS-селектор ```task.options.feed```)
- all:
    $ref: page
    select: 
      $ref: task.options.feed
    into: feed

# формування колекції посилань на публікації та поміщення її в змінну ```hrefs```
- map:
    $ref: feed
    transform:
      - js: (command, context, value) => value.map( a => a.attr("href"))
      - js: >
                  (command, context, value) => {
                    if (value) {
                      var i = 0
                      var list = []
                      value.forEach(function(entry) {
                        if (entry.slice(0,4) === "http") {
                          if (entry.startsWith(context.url)) {
                            list[i] = entry
                            i = i + 1
                          }
                        }
                        else {
                          list[i] = context.url + entry
                          i = i + 1
                        }

                      })
                    }
                    if (list[0]) {
                      return list
                    }
                  }
    into: hrefs

# оброблення елементів колекції ```hrefs```   
- each:
    in:
      $ref: hrefs
    as: href
    indexed-by: index
    into: messages

    # оброблення поточного елемента ```item```
    apply:
    
      - log:
        - $const: ">>> "
        - $ref: href

      - map:
          # поміщення ```options``` в ```res```
          - $ref: options
            into: res

      # вибірка та оброблення сторінки опису поточного повідомлення з використанням ```axios-plugin``` за адресою ```href``` 
      - fetch:
          request:
            method: GET
            url: 
              $ref: href
          transform:
            apply:
              - project: data
              # Перетворення в об'єкт cheerio та поміщення його в змінну ```msg```
              - html->$    
          into: msg

      # вибірка із "msg" заголовку повідомлення (селектор ```task.options.title```)      
      - once:
          $ref: msg
          select: 
            $ref: task.options.title
          apply:
          # перетворення вибраного елемента в text та поміщення його в змінну ```d.title```
          - transform:
              apply:
                - text
                - js: '(command, context, value) => value.replace(/[\u2000-\uffff]+/g, " ")'
                - js: (command, context, value) => `${value.replace(/(\n)/g, " ")} `
            into: d.title
          
          # перетворення вибраного елемента в html та поміщення його в змінну ```d.html.title```  
          - transform: html
            into: d.html.title

      # вибірка із "msg" тексту повідомлення (селектор ```task.options.content```)      
      - once:
          $ref: msg
          select: 
            $ref: task.options.content
          apply:
          # перетворення вибраного елемента в text та поміщення його в змінну ```d.content```
          - transform:
              apply:
                - text
                - js: '(command, context, value) => value.replace(/[\u2000-\uffff]+/g, " ")'
                - js: (command, context, value) => `${value.replace(/(\n)/g, " ")} `
            into: d.content
          
          # перетворення вибраного елемента в html та поміщення його в змінну ```d.html.content```  
          - transform: html
            into: d.html.content
      
       # вибірка із  ```msg``` дати публікації в форматі iso (селектор ```task.options.published```)
      - once:
          $ref: msg
          select: 
            $ref: task.options.published
          apply:
          # перетворення вибраного елемента в text та поміщення його в змінну ```d.published```  
          - transform: 
              apply:
                - attributes: datetime
                - project: datetime
            into: d.published
      
      - map:
          # обє'днання назви повідомлення (``title```) з контентом із ```d```
          # поміщення отриманого значення у ```res.scraper.message.text```
          - $ref: d
            transform:
              - js: (command, context, value) => `${value.title}. ${value.content}`
              - js: (command, context, value) => value.replace(/(\t)/g, " ")
            into: res.scraper.message.text  

          # обє'днання html поля ```html.title``` та ```html.content`` із ```d```
          # поміщення результату в ```res.scraper.message.raw.html```
          - $ref: d
            transform:
              js: (command, context, value) => `${value.html.title}.\n${value.html.content}`
            into: res.scraper.message.raw.html

          # перетворення ```res.scraper.message.text``` в сигнатуру md5 та 
          # поміщення результату в ```res.scraper.message.md5```
          - $ref: res.scraper.message.text
            transform: md5
            into: res.scraper.message.md5

          # вибірка із ```d``` поля ```published``` та
          # поміщення результату в ```res.scraper.message.publishedAt```
          - $ref: d.published 
            into: res.scraper.message.publishedAt

      # вибірка із "page" всіх посилань на зображення (селектор ```task.options.images```)      
      # поміщення результату в ```images```
      - all:
          $ref: msg
          select: 
            $ref: task.options.images
          into: images

      # вибірка зі списку ```images``` всіх посилань та їх обробка 
      # поміщення списку сформованих посилань у змінну ```res.scraper.message.links```
      - map:
          - $ref: images
            transform:
              - js: (command, context, value) => value.map( a => a.attr("src"))
              - js: >
                        (command, context, value) => { 
                          if (value) {
                            var i = 0
                            var links = []
                              value.forEach(function(entry) {
                                if (entry){
                                  links[i] = entry
                                  i = i + 1
                                } 
                                })
                            }
                            if (links[0]) {
                              return links
                            }
                          }
            into: res.scraper.message.images

      # вибірка із "msg" всіх елементів, що містять посилання (CSS-селектор ```div.c-article__body a```)
      - all:
          $ref: msg
          select: 
            $ref: task.options.links
          into: $l

      # вибірка зі списку $l всіх посилань та поміщення списку посилань у змінну ```res.scraper.message.links```
      - map:
          $ref: $l
          transform:
            - js: (command, context, value) => value.map( a => a.attr("href"))
            - js: >
                        (command, context, value) => { 
                          if (value) {
                            var i = 0
                            var links = []
                              value.forEach(function(entry) {
                                if (entry.slice(0,4) === "http") {
                                  links[i] = entry
                                  i = i + 1
                                }
                                })
                            }
                            if (links[0]) {
                              return links
                            }
                          }
          into: res.scraper.message.links
          
      # повернення результату оброблення поточного елемента ```item``` колекції ```res``` в ```res```
      - return: res

- return: messages

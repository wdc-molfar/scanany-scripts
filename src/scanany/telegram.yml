# Скрипт telegram.yml призначений для вибірки текстів повідомлень з ресурсу https://telegram.org за допомогою
# скрапера [scanany](https://github.com/boldak/scanany)

# Входить до складу проекту [@molfar](https://github.com/wdc-molfar)


# Відлагодження відбувається за допомою команди:

# ```sh
# npm run debug <path to script> [<path to settings>]
# ```

# Наприклад:

# ```sh
# npm run debug ./src/scanany/telegram.yml ./test/params/telegram.params.yml
# ```  

# Вхідні дані формуються планувальником завдань на основі оброблення бази даних медіа-джерел.

# Приклад вхідних даних (```./test/params/telegram.params.yml```):
# ```yaml
#task:
#    options:
#        account: AK47pfl     
# ```

# ** Опис алгоритму

# Використовуються плагіни ```axios-plugin``` для HTTP-запитів, ```cheerio-plugin```, ```js-plugin```
- use:     
    - axios-plugin
    - cheerio-plugin
    - js-plugin

# вибір даних із джерела
# вибірка та оброблення сторінки зі стрічкою публікацій з використанням ```axios-plugin``` за адресою ```url``` 
- map:
    - $ref: task.options.account
      into: account_url
      transform:
        js: '(command, context, value) => "https://t.me/s/"+value'
            
- fetch:
    request:
      method: GET
      url: 
        $ref: account_url
    transform:
      apply:
        - project: data
        - html->$
    into: page

# вибірка із "page" всіх повідомлень (CSS-селектор ```div.tgme_widget_message_bubble```)
- all:
    $ref: page
    select: div.tgme_widget_message_bubble
    into: res

# оброблення елементів колекції ```res```   
- each:
    in:
      $ref: res
    as: item
    indexed-by: index
    into: messages
    
    # оброблення поточного елемента ```item```
    apply:
    
      - map:
          # поміщення ```options``` в ```res```
          - $ref: options
            into: res

          # перетворення item -> html -> объект cheerio
          # результат перетворення буде поміщений у ```msg```
          - $ref: item
            transform: 
              apply:
                - html
                - html->$
            into: msg
      
      # вибірка із "msg" тексту повідомлення (CSS-селектор ```div.tgme_widget_message_text```)
      - once:
          $ref: msg
          select: div.tgme_widget_message_text
          apply:
            # перетворення вибраного елемента в text та поміщення його в змінну ```res.scraper.message.text```  
            - transform: 
                apply:
                  - text
                  - js: '(command, context, value) => value.replace(/[\u2000-\uffff]+/g, " ")'
              into: res.scraper.message.text
            
            # перетворення вибраного елемента в html та поміщення його в змінну ```res.scraper.message.raw.html```
            - transform: html
              into: res.scraper.message.raw.html
      
      # перетворення ```res.scraper.message.text``` в сигнатуру md5 та поміщення результату в ```res.scraper.message.md5```
      - map:
          $ref: res.scraper.message.text
          transform: md5
          into: res.scraper.message.md5 

      # вибірка із "msg" часу публікації повідомлення (CSS-селектор ```time```)
      - once:
          $ref: msg
          select: time
          apply:
            - transform: 
                # вибірка із елемента ```time``` атрибут "datetime" та розміщення його в ```res.scraper.message.publishedAt```
                apply:
                  - attributes: datetime
                  - project: datetime
              into: res.scraper.message.publishedAt
      
      # вибірка із "msg" всіх посилань на зображення (селектор ```a.tgme_widget_message_photo_wrap```)      
      # поміщення результату в ```images```
      - all:
          $ref: msg
          select: a.tgme_widget_message_photo_wrap
          into: images
      
      # вибірка зі списку ```images``` всіх посилань на зображення та їх обробка 
      # поміщення списку сформованих посилань у змінну ```res.scraper.message.links```    
      - map:
          - $ref: images
            transform:
              - js: (command, context, value) => value.map( a => a.attr("style"))
              - js: >
                        (command, context, value) => { 
                          if (value) {
                            var i = 0
                            var links = []
                              value.forEach(function(entry) {
                                entry = entry.match(/\http(.+?)\.jpg/g)
                                links[i] = entry[0]
                                i = i + 1
                                })
                            }
                            if (links[0]){
                                return links
                            }
                          }
            into: res.scraper.message.images
      
      # вибірка із "msg" всіх елементів, що містять посилання (CSS-селектор ```div.tgme_widget_message_text a```)
      - all:
          $ref: msg
          select: div.tgme_widget_message_text a
          into: $l

      # вибірка зі списку $l всіх посилань та поміщення списку посилань у змінну ```res.scraper.message.links```
      - map:
          $ref: $l
          transform:
            - js: (command, context, value) => value.map( a => a.attr("href"))
            - js: >
                        (command, context, value) => { 
                          if (value) {
                            var i = 0
                            var links = []
                              value.forEach(function(entry) {
                                if (entry.match("http")) {
                                  links[i] = entry
                                  i = i + 1
                                }
                                })
                            }
                            if (links[0]) {
                              return links
                            }
                          }
          into: res.scraper.message.links      

      # обчислення поточної дати в форматі iso та поміщення її у ```res.scraper.scrapedAt```
      - map:
        - transform: date
          into: res.scraper.scrapedAt

      # повернення результату оброблення поточного елемента ```item``` колекції ```res``` в ```res```
      - return: res

- return: messages


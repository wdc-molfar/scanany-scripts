# Скрипт youtube.yml призначений для вибірки текстів повідомлень з ресурсу https://youtube.com за допомогою
# скрапера [scanany](https://github.com/boldak/scanany)

# Входить до складу проекту [@molfar](https://github.com/wdc-molfar)


# Відлагодження відбувається за допомою команди:

# ```sh
# npm run debug <path to script> [<path to settings>]
# ```

# Наприклад:

# ```sh
# npm run debug ./src/scanany/youtube.yml ./test/params/youtube.params.yml
# ```  

# Вхідні дані формуються планувальником завдань на основі оброблення бази даних медіа-джерел.

# Приклад вхідних даних (```./test/params/youtube.params.yml```):
# ```yaml
#options:
#  task:
#    params: ## from section source
#      url: https://t.me/s/AK47pfl
#    instance: b940bfda-d145-4385-9dc6-c347dcd0fbcf ## scheduler instance   
#  scraper:
#    instance: b940bfda-d145-4385-9dc6-c347dcd0fbcf ## scraper instance   
#    scrapedAt: 2022-08-18T12:04:51.474Z     
# ```

# ** Опис алгоритму

# Використовуються плагіни ```axios-plugin``` для HTTP-запитів, ```puppeteer-plugin```, ```js-plugin```
- use:
    - axios-plugin
    - puppeteer-plugin
    - js-plugin

# вибір даних із джерела
- map:
    # Визначення посилання на хост медіа-джерела (змінна ```url```)
    - $ref: options.task.params.url
      transform:
        apply:
          - js: (command, context, value) => `${value}/videos`
      into: url

# Вибірка та оброблення сторінки каналу з використанням ```puppeteer-plugin``` за адресою ```url```
- puppeteer:
    apply:
        # зупуск headless browser
        - launch:
            options:
                defaultViewport: null
                # headless: false
                args:
                  # - "--no-sandbox" 
                  # - "--disable-setuid-sandbox"
                  - "--window-size=800,1800"
            as: browser
          

        # створюємо нову сторінку ```page``` headless browser
        - new-page:
            $ref: browser
            as: page
      
        # переходимо на сторінку ```page``` за вказаним ```url```
        - goto:
            $ref: page 
            url: 
                $ref: url
            options:
                waitUntil: networkidle2

        # вибірка з ```page``` всіх відео (селектор ```a[id="video-title"]```)       
        - all:
            $ref: page
            select: a[id="video-title"]
            # результат оброблення буде поміщений у ```list```
            into: list

        # Оброблення елементів колекції ```list```      
        - each:        
            # колекція
            in:
              $ref: list 
            # поточний елемент
            as: item
            indexed-by: index
            # результат оброблення буде поміщений у ```refs```
            into: messages

            apply:

                # Формування url сторінки поточного відео (змінна ```href```)
                - map:
                      $ref: item
                      # перетворення вибраного елемента в href та поміщення його в змінну ```href```
                      transform: 
                        apply:
                          - attributes: href
                          - project: href
                          - js: (command, context, value) => `${value.replace("/shorts/","")}`
                          - js: (command, context, value) => `https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${value.replace("/watch?v=","")}&key=AIzaSyCsmgzbFS9ZxaayavPDjmNF-QSmMj5JMA4`
                      into: href

                - fetch:
                    request:
                      method: GET
                      url: 
                        $ref: href
                    transform:
                      apply:
                        - project: data
                    into: p

                - map:
                    # поміщення ```options``` в ```res```
                    - $ref: options
                      into: res

                    # вибірка із ```p.items[0].snippet``` назви відео (``title```) опису відео (поле ```description```) та
                    # поміщення отриманого значення у ```res.scraper.message.text```
                    - $ref: p.items[0].snippet
                      transform:
                        js: (command, context, value) => `${value.title}\n${value.description}`
                      into: res.scraper.message.text

                    # вибірка із ```p.items[0].snippet``` назви відео (``title```) опису відео (поле ```description```) та
                    # поміщення отриманого значення у ```res.scraper.message.raw.text```
                    - $ref: p.items[0].snippet
                      transform:
                        js: (command, context, value) => `${value.title}\n${value.description}`
                      into: res.scraper.message.raw.text

                    # перетворення ```res.scraper.message.text``` в сигнатуру md5 та 
                    # поміщення результату в ```res.scraper.message.md5```
                    - $ref: res.scraper.message.text
                      transform: md5
                      into: res.scraper.message.md5

                    # вибірка із ```p.items[0].snippet``` посилання на зображення та
                    # поміщення отриманого значення у ```res.scraper.message.links[0]```
                    - $ref: p.items[0].snippet.thumbnails.high.url
                      into: res.scraper.message.images[0]

                    # вибірка із  ```p.items[0].snippet``` дати публікації в форматі iso (поле ```publishedAt```) та
                    # поміщення її у ```res.scraper.scrapedAt```
                    - $ref: p.items[0].snippet.publishedAt
                      into: res.scraper.message.publishedAt

                    # обчислення поточної дати в форматі iso та поміщення її у ```res.scraper.scrapedAt```
                    - transform: date 
                      into: res.scraper.scrapedAt

                - return: res

        # закриття сторінки ```page``` headless browser
        - close:
            $ref: page

        # закриття headless browser
        - close:
            $ref: browser

# Повернення результату роботи скрипта
- return: messages

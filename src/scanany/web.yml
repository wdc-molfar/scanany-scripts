# Скрипт web.yml призначений для вибірки текстів повідомлень з web-ресурсів за допомогою
# скрапера [scanany](https://github.com/boldak/scanany)

# Входить до складу проекту [@molfar](https://github.com/wdc-molfar)


# Відлагодження відбувається за допомою команди:

# ```sh
# npm run debug <path to script> [<path to settings>]
# ```

# Наприклад:

# ```sh
# npm run debug ./src/scanany/web.yml ./test/params/web.params.yml
# ```  

# Вхідні дані формуються планувальником завдань на основі оброблення бази даних медіа-джерел.

# Приклад вхідних даних (```./test/params/web.params.yml```):
# ```yaml
#options:
#  task:
#    params: ## from section source
#      url: https://tsn.ua/
#    instance: b940bfda-d145-4385-9dc6-c347dcd0fbcf ## scheduler instance   
#  scraper:
#    instance: b940bfda-d145-4385-9dc6-c347dcd0fbcf ## scraper instance   
#    scrapedAt: 2022-08-18T12:04:51.474Z     
# ```

# ** Опис алгоритму

# Використовуються плагіни ```axios-plugin``` для HTTP-запитів, ```cheerio-plugin```, ```js-plugin```
- use:     
    - axios-plugin
    - cheerio-plugin
    - js-plugin

# Попереднє оброблення вхідних даних
- map:
    # Формування url зі списком публікацій на основі вихідних даних (змінна ```url```)
    - $ref: options.task.params.url
      into: url

# вибір даних із джерела
# вибірка та оброблення сторінки зі стрічкою публікацій з використанням ```axios-plugin``` за адресою ```url``` 
- fetch:
    request:
      method: GET
      url: 
        $ref: url
    transform:
      apply:
        - project: data
        - html->$
    into: page

# вибірка із "page" всіх повідомлень, що містять текст (CSS-селектор ```a[class="media_more_a"]```)
- all:
    $ref: page
    select: div[class="l-sidebar__main c-feed-log--y c-feed-log--y-start"] a
    # перетворення вибраного елемента в href та поміщення його в змінну ```href```
    into: list

# оброблення елементів колекції ```res```   
- each:
    in:
      $ref: list
    as: item
    indexed-by: index
    into: messages
    
    # оброблення поточного елемента ```item```
    apply:
    
      - map:
          # поміщення ```options``` в ```res```
          - $ref: options
            into: res
      
          # перетворення item -> html -> объект cheerio
          # результат перетворення буде поміщений у ```msg```
          - $ref: item
            # перетворення вибраного елемента в href та поміщення його в змінну ```href```
            transform: 
              apply:
                - attributes: href
                - project: href
            into: href

      # вибірка та оброблення сторінки опису поточного повідомлення з використанням ```axios-plugin``` за адресою ```href``` 
      - fetch:
          request:
            method: GET
            url: 
              $ref: href
          transform:
            apply:
              - project: data
              # Перетворення в об'єкт cheerio та поміщення його в змінну ```p```
              - html->$    
          into: msg

      # вибірка із "msg" заголовку повідомлення (селектор ```р1```)      
      - once:
          $ref: msg
          select: h1
          apply:
          # перетворення вибраного елемента в text та поміщення його в змінну ```d.title```
          - transform:
              apply:
                - text
                - js: '(command, context, value) => value.replace(/[\u2000-\uffff]+/g, " ")'
                - js: (command, context, value) => `${value.replace(/(\n)/g, " ")} `
            into: d.title
          
          # перетворення вибраного елемента в html та поміщення його в змінну ```d.html.title```  
          - transform: html
            into: d.html.title

      # вибірка із "msg" короткого опису повідомлення (селектор ```р1```)      
      - once:
          $ref: msg
          select: h1
          apply:
          # перетворення вибраного елемента в text та поміщення його в змінну ```d.description```
          - transform:
              apply:
                - text
                - js: '(command, context, value) => value.replace(/[\u2000-\uffff]+/g, " ")'
                - js: (command, context, value) => `${value.replace(/(\n)/g, " ")} `
            into: d.description
          
          # перетворення вибраного елемента в html та поміщення його в змінну ```d.html.description```  
          - transform: html
            into: d.html.description

      # вибірка із "msg" тексту повідомлення (селектор ```div[class="c-article__body"]```)      
      - once:
          $ref: msg
          select: div[class="c-article__body"]
          apply:
          # перетворення вибраного елемента в text та поміщення його в змінну ```d.content```
          - transform:
              apply:
                - text
                - js: '(command, context, value) => value.replace(/[\u2000-\uffff]+/g, " ")'
                - js: (command, context, value) => `${value.replace(/(\n)/g, " ")} `
            into: d.content
          
          # перетворення вибраного елемента в html та поміщення його в змінну ```d.html.content```  
          - transform: html
            into: d.html.content
      
       # вибірка із  ```msg``` дати публікації в форматі iso (поле ```published```)
      - once:
          $ref: msg
          select: time
          apply:
          # перетворення вибраного елемента в text та поміщення його в змінну ```d.published```  
          - transform: 
              apply:
                - attributes: datetime
                - project: datetime
            into: d.published
      
      - map:
          # обє'днання назви повідомлення (``title```) з описом (```description```) та контентом із ```d```
          # та поміщення отриманого значення у ```res.scraper.message.text```
          - $ref: d
            transform:
              - js: (command, context, value) => `${value.title}. ${value.description}. ${value.content}`
              - js: (command, context, value) => value.replace(/(\t)/g, " ")
            into: res.scraper.message.text  

          # обє'днання html поля ```html.title``` з ```html.description``` та ```html.content`` із ```d```
          # поміщення результату в ```res.scraper.message.raw.html```
          - $ref: d
            transform:
              js: (command, context, value) => `${value.html.title}.\n${value.html.description}.\n${value.html.content}`
            into: res.scraper.message.raw.html

          # перетворення ```res.scraper.message.text``` в сигнатуру md5 та 
          # поміщення результату в ```res.scraper.message.md5```
          - $ref: res.scraper.message.text
            transform: md5
            into: res.scraper.message.md5

          # вибірка із ```d``` поля ```published``` та
          # поміщення результату в ```res.scraper.message.publishedAt```
          - $ref: d.published 
            into: res.scraper.message.publishedAt

      # вибірка із "page" всіх посилань на зображення (селектор ```img[class="media-photos_img"]```)      
      # поміщення результату в ```images```
      - all:
          $ref: msg
          select: picture img
          into: images

      # вибірка зі списку ```images``` всіх посилань та їх обробка 
      # поміщення списку сформованих посилань у змінну ```res.scraper.message.links```
      - map:
          - $ref: images
            transform:
              - js: (command, context, value) => value.map( a => a.attr("src"))
              - js: >
                        (command, context, value) => { 
                          if (value) {
                            var i = 0
                            var links = []
                              value.forEach(function(entry) {
                                if (entry){
                                  links[i] = entry
                                  i = i + 1
                                } 
                                })
                            }
                            if (links[0]) {
                              return links
                            }
                          }
            into: res.scraper.message.images

      # вибірка із "msg" всіх елементів, що містять посилання (CSS-селектор ```div.c-article__body a```)
      - all:
          $ref: msg
          select: div.c-article__body a
          into: $l

      # вибірка зі списку $l всіх посилань та поміщення списку посилань у змінну ```res.scraper.message.links```
      - map:
          $ref: $l
          transform:
            - js: (command, context, value) => value.map( a => a.attr("href"))
            - js: >
                        (command, context, value) => { 
                          if (value) {
                            var i = 0
                            var links = []
                              value.forEach(function(entry) {
                                if (entry.slice(0,4) === "http") {
                                  links[i] = entry
                                  i = i + 1
                                }
                                })
                            }
                            if (links[0]) {
                              return links
                            }
                          }
          into: res.scraper.message.links
          
      # повернення результату оброблення поточного елемента ```item``` колекції ```res``` в ```res```
      - return: res

- return: messages